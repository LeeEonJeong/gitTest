NoSQL이 무엇인지, aws에서 제공하는 ElastiCache를 사용하기 위한 분산 인메모리 캐시 시스템에 대해 조사하였다.

1. NoSQL의 탄생 배경과 어떤 구조 형태인지 공부하고, mongoDB를 설치하고 사용해봄.
 - 기존 관계형 데이터 베이스에서 추구하던 ACID원칙에서 탈피해 BASE원칙을 고수한다.
 -ACID를 포기하고 고성능과 높은 가용성을 추구하면서 분산 컴퓨팅 개념중 하나인 sharding 과 replica 개념을 사용한다.
 - 빠른 찾기에 중점이 맞춰졌기 때문에 key-value 원칙으로 Indexing 방법 사용한다.

2. 분산 인 메모리 캐시가 무엇인지, 이런 서비스를 제공하는 엔진이 무엇인가에 대해 공부했다. 
 - in memory cache : 캐시는 빠른 속도를 위해서 어떤 결과를 저장해 두는 것을 의미하며, 또한 데이터가 사라지면 다시 만들 수 있다는 전제를 내포하고 있다. In-Memory-Cache는 메인 데이터 저장소로 사용할 수도 있지만, 인 메모리 캐시는 주로 임시 저장소의 용도로 사용된다.
- 분산 인 메모리 캐시 엔진
 1) Memcached : 분산된 서버(노드) 들의 메모리를 논리적으로 하나로 묶어주는 엔진
 2) Redis : Memcached + 저장소. 저장소라는 개념이 추가 되면서 데이터가 유지되어야 한다는 특성을 갖게 된다.

----

목동 IDC센터 실습.
인프라팀에서 하는 업무에 대해 알아보고, UTP(꼬임쌍선 케이블) 두가지를 직접 만들어 보았다.

1. IT인프라를 구성하는 요소
  퍼실리티(건물, 시설, 설비에 해당되는 요소), 서버-스토리지, 네트워크 로 구성.
네트워크를 연결하는 선들(ex. 광케이블, UTP케이블 등)이 무엇인지 알아보고난 후,
크로스케이블과 다이렉트 케이블을 만들고 옳바르게 만들어졌나 테스트까지 해봄.

2. 서버 사양 결정하는 방법에 대해 대략 적으로 익힘.
  실제 환경을 시험적으로 구축하고 임시로 결정한 서버 사양의 기기를 현장에 투입후 자원 사용량을 측정하고, 소거법으로 사양을 좁혀나감.
스케일 업, 스케일 아웃 이라는 두가지 방법이 있다.

3. 물리 서버 종류
 - 랙 마운트형 : 납작한 판의 형태를 갖췄으며 랙의 한칸에 차지 한다.
    엔트리서버, 미들레인지 서버, 하이엔드 서버, 엔터프라이즈 서버 가있으며 오른쪽으로 갈 수록 비싸다.
 - 타워형 : 일반 데스크톱 처럼 생겼다.
    IA 서버. 인텔 호환 CPU를 탑재하고 일반 컴퓨터와 같은 아키텍쳐 기반으로 만들어진 서버.
제조사는 HP, DELL, Intel 등 있지만 주로 HP와 DELL 위주로 쓰인다.

4. CPU & Memory
- CPU점유율이 가장 높은 Intel의 cpu역사에 대해 익히고, Intel사의 CPU 상품명을 읽는 방법에 대해 익힘.
- RAM을 나누는 방법(DDR 시리즈 / 단면형, 양면형 / RDIMM, UDIMM)가 무엇이 있는지 알아봄.
- 실제로 CPU와 Memory를 메인보드에 설치해봄.

5. 디스크 & RAID 실습
 실제 서버에 어떻게 장착되고 묶여 지는지,  RAID를 구성하는 하드디스크(혹은 SSD)가 오류가 났을때 상황을 시현해보고 오류를 처리해봄.

----

목동 IDC 센터에서 실습.
가상 서버와 물리 서버 그리고 네트워크에 대해 배웠다.

1. 물리서버 실습
  - 물리 서버를 IDC센터에 있는 서버 컴퓨터에 KVM을 연결해 윈도우, 리눅스 서버를 설치함.
  - 윈도우 서버 : 웹 애플리케이션설정, IIS설정, 방화벽 설정, FTP, HTTP 서비스 설정.
  - 리눅스 서버 : 디스크 파티션, 디스크 마운트, 방화벽 설정

2. 가상 서버 실습.
  Hypervisor 를 크게 나누면 native방식과 hosted방식 두가지로 나뉘는데, 그중에서 native 방식에 대해 더 상세히 공부함.
 native 방식 hypervisor역시 두가지 종류가 있는데, 1)전 가상화 2) 반 가상화 로 나뉠 수 있다.
    - 전 가상화 : CPU가 가상화를 지원 해줘야 하며, guestOS의 하드 웨어 요청을 직접 하드웨어함.
    - 반 가상화 : CPU가 가상화 지원을 안해도 된다. guestOS의 하드웨어 요청을 hypervisor가 받아서 처리한다.
 전 가상화를 제공하는 윈도우 hyper-v를 이용해 리눅스OS(centOS)를 설치하고 FTP, apache 서비스를 설치하여 서버-클라이언트 모형을 실습해 봤다.

3. 네트워크
  네트워크를 구성하는 계층과 트리포드에서 제공하는 네트워크 계층에 대해 익혔다.
IDC센터에서 직접 백본 스위치와 분산 스위치가 어떻게 연결 되어 있는지 확인해보고, IP분배를 어떻게 하는지, 네트워크 명령어가 어떻게 되는지 알아 봤다.

----

Ucloud openAPI를 사용하기 앞서 API 종류에 무엇이 있는지 공부하였다.

1. REST API
 REpresentational State Transfer의 약자. 통신 규약이나 표준 또는 스펙이 아니라 분산 하이퍼미디어 시스템을 위한 www 같은 소프트웨어 아키텍처의 한 형식이며 네트워크 상에서 클라이언트와 서버 사이의 통신 방식. ROA(Resource Oriented Architecture) 속성을 따르는 웹 서비스 아키텍처다.

2. SOAP 
  기존의 어플리케이션들의 기능들을 비즈니스적인 의미를 가지는 기능 단위로 묶어서 표준화된 호출 인터페이스를 통해 소프트웨어 컴포넌트 단위로 재조합 후,  해당 서비스를 서로 조합하여 업무 기능을 구현한 어플리케이션을 만들어내는 소프트웨어 아키텍처. 응용 프로그램 간에 연동을 목적으로 상호 이해 가능한 포맷의 메시지를 SOAP으로 송-수신함으로 원격지에 있는 서비스 객체나 API를 자유롭게 사용하고자 하는 기업의 요구에서 출발하였다.

3. SOAP 와 REST  방식의 차이
  SOAP방식의 경우 제공자가 UDDI 라는 웹서비스를 등록하고 검색하기 위한 저장소에 등록을 해야 서비스 제공이 가능하지만, REST방식은 서버가 사용자에게 API를 제공하기 위해서 굳이 UDDI에 등록을 할 필요가 없다. 
  클라이언트가 SOAP 방식을 사용하기 위해선 데이터를 HTTP+SOAP+DATA로 구성해서 사용해야 하며, REST방식은 HTML에서 사용하는 메소드들(get,post...)를 사용하면 되기 때문에 별도의 전송을 환경을 설정하지 않아도 된다.

----

UCloud open API에서 제공하는 REST 타입의 API를 사용하기 위해 어떻게 코딩을 해야 하는지 알아보고 실행해본다.
UCloud open API 명령어마다 어떤 parameter가 들어가고, 이에 따른 결과 값을 어떻게 처리해야 하는지 정리하고 사용해본다.
실제로 콘솔 웹사이트를 만들기 위해 메뉴 구성도를 만드는 방법을 알아보고 구상해 본다.
프로젝트를 어떻게 배분할지 고민해 본다.
github 사용법을 익힌다.
php header, $_SERVER에 대해 익힌다.
ajax를 공부한다.

